/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.40
 * Generated at: 2025-05-07 02:47:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._03Scope;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import common.Person;
import common.Person;

public final class PageContextMain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/03Scope/PageInclude.jsp", Long.valueOf(1746585969950L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("common.Person");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
  // 속성 저장
/*
page 영역 : 하나의 페이지에서만 영역이 공유되고 페이지 이동, 포워드 된
	페이지에서는 영역이 소멸되어 공유되지 않는다. 즉 해당 페이지에서만 
	사용할 수 있는 영역이다. JSP에서의 영역은 데이터를 저장하는 공간으로
	메모리라고 생각하면 된다.
*/
//pageContext 를 이용해 page 영역에 정수형 데이터 속성값을 저장
pageContext.setAttribute("pageInteger", 1000);
//pageContext 를 이용해 page 영역에 문자열 데이터 속성값을 저장
pageContext.setAttribute("pageString", "페이지 영역의 문자열");
//일반적인 클래스를 통해 생성한 객체
pageContext.setAttribute("pagePerson", new Person("한석봉", 99));
/*
page영역을 포함한 4가지 영역에는 모든 데이터(객체)를 저장할 수 있다.
Object를 기반으로 저장되므로 차후 값을 읽을때는 해당 타입으로 형변환
해야 한다.
*/

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<title>page 영역</title>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<h2>page 영역의 속성값 읽기</h2>\r\n");
      out.write("		");

		// 정수 데이터를 읽을때는 Integer클래스를 통해 자동 언박싱한다.
		int pInteger = (Integer)(pageContext.getAttribute("pageInteger"));
		// 문자열 데이터는 toString()을 통해 문자열 형태로 반환한다.
		String pString = pageContext.getAttribute("pageString").toString();
		// Person과 같이 개발자가 정의한 클래스는 원래의 타입으로 형변환 한다.
		Person pPerson = (Person)(pageContext.getAttribute("pagePerson"));
		
      out.write("\r\n");
      out.write("		<ul>\r\n");
      out.write("			<!-- Java의 기본클래스인 경우 별도의 처리없이 즉시 내용을 출력할 수 있다.  -->\r\n");
      out.write("			<li>Integer 객체 : ");
      out.print( pInteger );
      out.write("</li>\r\n");
      out.write("			<li>String 객체 : ");
      out.print( pString );
      out.write("</li>\r\n");
      out.write("			<!-- Person 클래스는 getter()를 통해 출력한다. -->\r\n");
      out.write("			<li>Person 객체 : ");
      out.print( pPerson.getName() );
      out.write(", \r\n");
      out.write("	        	");
      out.print( pPerson.getAge() );
      out.write("</li>\r\n");
      out.write("		</ul>\r\n");
      out.write("		\r\n");
      out.write("		<!-- \r\n");
      out.write("	    	지시어를 통한 include는 포함시킬 페이지의 원본소스를 그대로 현재 문서에\r\n");
      out.write("	    	포함시킨 후 컴파일을 진행한다. 따라서 동일한 페이지로 취급되므로 page\r\n");
      out.write("	    	영역이 그대로 공유된다.\r\n");
      out.write("	    	즉, 인클루드 된 페이지의 내용은 정상적으로 출력된다.\r\n");
      out.write("	     -->\r\n");
      out.write("	    <h2>include된 파일에서 page 영역 읽어오기</h2>\r\n");
      out.write("	    ");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<title>Insert title here</title>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<h4>Include 페이지</h4>\r\n");
      out.write("		");
  // 중복 처리 되지 않기 위해 2를 첨가._JspService() 안에 있기 때문
		int pInteger2 = (Integer)(pageContext.getAttribute("pageInteger"));
		//String pString2 = pageContext.getAttribute("pageString").toString();
		Person pPerson2 = (Person)(pageContext.getAttribute("pagePerson"));
		
      out.write("\r\n");
      out.write("		<ul>\r\n");
      out.write("		    <li>Integer 객체 : ");
      out.print( pInteger2 );
      out.write("</li>\r\n");
      out.write("		    <!-- 위에서 주석 처리하여 여기에서 직접 출력(형변환 없음) --> \r\n");
      out.write("		    <li>String 객체 : ");
      out.print( pageContext.getAttribute("pageString") );
      out.write("</li>\r\n");
      out.write("		    <li>Person 객체 : ");
      out.print( pPerson2.getName() );
      out.write(',');
      out.write(' ');
      out.print( pPerson2.getAge() );
      out.write("</li>\r\n");
      out.write("		</ul>\r\n");
      out.write("		\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("	    \r\n");
      out.write("	    <h2>페이지 이동 후 page 영역 읽어오기</h2>\r\n");
      out.write("	    <a href=\"PageLocation.jsp\">PageLocation.jsp 바로가기</a>\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
