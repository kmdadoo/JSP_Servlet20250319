/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.40
 * Generated at: 2025-05-09 06:58:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._08Board;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import model1.board.BoardDTO;
import model1.board.BoardDAO;
import utils.JSFunction;

public final class Edit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/08Board/IsLoggedIn.jsp", Long.valueOf(1746762798484L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("utils.JSFunction");
    _jspx_imports_classes.add("model1.board.BoardDTO");
    _jspx_imports_classes.add("model1.board.BoardDAO");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 수정 페이지로 진입시 로그인을 확인한다. -->\r\n");
      out.write("\r\n");
      out.write("\r\n");

/*
로그인 체크를 위한 파일로 섹션영역에 UserId라는 속성값이 없으면
경고창을 띄운 후 로그인 페이지로 이동한다.
로그인이 필요한 모든 페이지 상단에 include지시어를 통해 포함시킬 
예정이다.
*/
if (session.getAttribute("UserId") == null)
{
	JSFunction.alertLocation("로그인 후 이용해주세요!",	
			"../06Session/LoginForm.jsp", out);
	return;
}

      out.write("  \r\n");

//수정할 게시물의 일련번호를 파라미터로 받아온다.
String num = request.getParameter("num");
//DAO 객체 생성
BoardDAO dao = new BoardDAO(application);
//기존 게시물의 내용을 읽어온다.
BoardDTO dto = dao.selectView(num);
//세션영역에 저장된 회원 아이디를 가져와서 문자열로 반환한다.
String sessionId = session.getAttribute("UserId").toString(); // 로그인 아이디 확인
//로그인한 회원이 작성자인지 판단한다. 본인인지 확인
if(!sessionId.equals(dto.getId()))
{
	JSFunction.alertBack("작성자 본인만 수정할 수 있습니다.", out);
	return;
}
/*
URL의 패턴을 파악하면 내가 작성한 게시물이 아니어도 얼마든지 수정페이지로
진입할 수 있다. 따라서 수정페이지 자체에서도 작성자 본인이 맞는지 확인하는
절차가 필요하다.
*/
//자원해제
dao.close();

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>회원제 게시판</title>\r\n");
      out.write("		<script type=\"text/javascript\">\r\n");
      out.write("			function validateForm(form) {  \r\n");
      out.write("			    if (form.title.value == \"\") {\r\n");
      out.write("			        alert(\"제목을 입력하세요.\");\r\n");
      out.write("			        form.title.focus();\r\n");
      out.write("			        return false;\r\n");
      out.write("			    }\r\n");
      out.write("			    if (form.content.value == \"\") {\r\n");
      out.write("			        alert(\"내용을 입력하세요.\");\r\n");
      out.write("			        form.content.focus();\r\n");
      out.write("			        return false;\r\n");
      out.write("			    }\r\n");
      out.write("			}\r\n");
      out.write("		</script>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../Common/Link.jsp", out, false);
      out.write("\r\n");
      out.write("		<h2>회원제 게시판 - 수정하기(Edit)</h2>\r\n");
      out.write("		<!-- 수정 처리는 EditProcess.jsp에서... -->\r\n");
      out.write("		<form name=\"writeFrm\" method=\"post\" action=\"EditProcess.jsp\"\r\n");
      out.write("		      onsubmit=\"return validateForm(this);\">\r\n");
      out.write("		    <!-- \r\n");
      out.write("				게시물의 일련번호를 서버(EditProcess.jsp)로 전송하기 위해서 \r\n");
      out.write("				hidden타입의 input이 반드시 필요하다.\r\n");
      out.write("			-->\r\n");
      out.write("		    <input type=\"hidden\" name=\"num\" value=\"");
      out.print( dto.getNum() );
      out.write("\" />  \r\n");
      out.write("		    <table border=\"1\" width=\"90%\">\r\n");
      out.write("		        <tr>\r\n");
      out.write("		            <td>제목</td>\r\n");
      out.write("		            <td>\r\n");
      out.write("		                <input type=\"text\" name=\"title\" style=\"width: 90%;\" \r\n");
      out.write("		                	value=\"");
      out.print( dto.getTitle() );
      out.write("\" />\r\n");
      out.write("		            </td>\r\n");
      out.write("		        </tr>\r\n");
      out.write("		        <tr>\r\n");
      out.write("		            <td>내용</td>\r\n");
      out.write("		            <td>\r\n");
      out.write("		            	<!-- 시작 태그와 종료 태그 사이에 텍스트가 들 \r\n");
      out.write("							어가므로 반드시 공백 space 없이 작성 -->\r\n");
      out.write("		                <textarea name=\"content\" style=\"width: 90%; \r\n");
      out.write("		                	height: 100px;\">");
      out.print( dto.getContent() );
      out.write("</textarea>\r\n");
      out.write("		            </td>\r\n");
      out.write("		        </tr>\r\n");
      out.write("		        <tr>\r\n");
      out.write("		            <td colspan=\"2\" align=\"center\">\r\n");
      out.write("		                <button type=\"submit\">작성 완료</button>\r\n");
      out.write("		                <button type=\"reset\">다시 입력</button>\r\n");
      out.write("		                <button type=\"button\" onclick=\"location.href='List.jsp';\">\r\n");
      out.write("		                    목록 보기</button>\r\n");
      out.write("		            </td>\r\n");
      out.write("		        </tr>\r\n");
      out.write("		    </table>\r\n");
      out.write("		</form>\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
