/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.40
 * Generated at: 2025-05-07 05:35:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._04Cookie;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class CookieMain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<title>Cookie</title>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<!-- \r\n");
      out.write("			쿠키 : 클라이언트의 상태 정보를 유지하기 위한 기술로 클라이언트의\r\n");
      out.write("				PC에 파일형태로 저장된다. 쿠키하나의 크기는 4kb이고, 3000개까지\r\n");
      out.write("				만들 수 있다.\r\n");
      out.write("		 -->\r\n");
      out.write("		<h2>1. 쿠키(Cookie) 설정</h2>\r\n");
      out.write("		");

		/*
	    	쿠키는 생성자를 통해서만 생성할 수 있다. setNmae()이란 메서드가
	    	없으므로 쿠키는 생성한 후 쿠키명을 변경하는 것은 불가능하다.
	    */
	    Cookie cookie = new Cookie("myCookie", "쿠키맛나요"); 	// 쿠키생성
	    /*
	    	쿠키의 경로 설정. 컨텍스트루트 경로로 지정하므로 웹에플리케이션 
	    	전체에서 사용할 수 있게 된다.
	    */
	 	// 경로를 컨텍스트 루트로 설정(/MustHaveJSP 가 반환되어 설정)
	    cookie.setPath(request.getContextPath());
	    System.out.println("설정경로:"+request.getContextPath());
	    cookie.setMaxAge(3600);	 // 유지시간을 1시간으로 설정
	 	// 응답헤더에 쿠키를 추가하여 클라이언트 쪽으로 전송한다.
	    response.addCookie(cookie);		// 응답헤더에 쿠키 추가
	    /*
	    	여기까지의 코드를 통해 클라이언트 측에 쿠키가 생성 된다.
	    */
		
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		<h2>2. 쿠키 설정 직후 쿠키값 확인하기</h2>\r\n");
      out.write("		");

		/*
	    	request내장객체의 getCookies()를 통해 현재 생성된 모든 쿠키를 
	    	배열의 형태로 가져온다.
	    */
		Cookie[] cookies = request.getCookies();	// 요청 헤더의 모든 쿠키 얻기
		// 생성된 쿠키가 있다면 갯수만큼 반복한다.
		if(cookies!=null){
			// 향상된 for문을 통해 쿠키를 읽어서....
			for(Cookie c : cookies){
				// 쿠키명과 쿠키값을 웹브라우저에 출력한다.
				String cookieName = c.getName(); // 이름 얻기
	            String cookieValue = c.getValue();  // 값 얻기
	         	// 화면에 출력
	            out.println(String.format("%s : %s<br/>", cookieName, cookieValue));
			}
		}
		/*
	    	쿠키가 생성된 직후에는 쿠키값을 읽을 수 없다. 클라이언트 측에
	    	있는 쿠키를 서버로 다시 전송하기 위해 페이지이동을 하거나 새로
	    	고침을 하여 새로운 요청을 보내야만 읽을 수 있다.
	    */
		
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		<h2>3. 페이지 이동 후 쿠키값 확인하기</h2>\r\n");
      out.write("	    <a href=\"CookieResult.jsp\">\r\n");
      out.write("	        다음 페이지에서 쿠키값 확인하기\r\n");
      out.write("	    </a>\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
