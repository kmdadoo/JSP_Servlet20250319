/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.40
 * Generated at: 2025-05-07 06:10:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._04Cookie;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class PopupMain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

String popupMode = "on";
//쿠키를 배열로 얻어온 후 모든 쿠키를 읽는다
Cookie[] cookies = request.getCookies();
if (cookies != null) {
    for (Cookie c : cookies) {
        String cookieName = c.getName();
        String cookieValue = c.getValue();
        // 만약 쿠키명이 아래와 일치한다면 쿠키값을 읽어 변수에 저장한다.
        if (cookieName.equals("PopupClose")) {
            popupMode = cookieValue; // popupMode의 값을 갱신
        }
    }
} 

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("		<title>쿠키를 이용한 팝업 관리</title>\r\n");
      out.write("		<style>\r\n");
      out.write("		    div#popup{\r\n");
      out.write("		        position: absolute; top:100px; left:100px; color:yellow;  \r\n");
      out.write("		        width:300px; height:100px; background-color:gray;\r\n");
      out.write("		    }\r\n");
      out.write("		    div#popup>div{\r\n");
      out.write("		        position: relative; background-color:#ffffff; top:0px;\r\n");
      out.write("		        border:1px solid gray; padding:10px; color:black;\r\n");
      out.write("		    }\r\n");
      out.write("		</style>\r\n");
      out.write("		<script>\r\n");
      out.write("		$(function() {\r\n");
      out.write("			$('#closeBtn').click(function() {\r\n");
      out.write("		        $('#popup').hide();\r\n");
      out.write("		     	// 하루동안 열지 않음 체크박스에 체크한 경우에는 value를 얻어와서 \r\n");
      out.write("		    	// 변수에 저장한다.\r\n");
      out.write("		    	var chkVal = $(\"input:checkbox[id=inactiveToday]:checked\").val();\r\n");
      out.write("		    	// jQuery의 ajax()함수를 통해 요청값을 전송한다.\r\n");
      out.write("		    	$.ajax({\r\n");
      out.write("		    		// 요청할 서버의 URL(경로)\r\n");
      out.write("		    		url : './PopupCookie.jsp',\r\n");
      out.write("		    		// 전송방식\r\n");
      out.write("		        	type : 'get',\r\n");
      out.write("		        	// 요청시 전송할 파라미터. 여기서는 체크박스의 값을 설정한다.\r\n");
      out.write("		        	// 즉 체크를 했다면 1을 전송하고, 아니면 아무값도 전송하지 않는다. \r\n");
      out.write("		        	data : {inactiveToday : chkVal },\r\n");
      out.write("		        	// 콜백데이터의 타입은 text형식으로 지정한다.\r\n");
      out.write("		        	dataType : \"text\",\r\n");
      out.write("		        	// 성공시 자동호출 될 콜백 함수\r\n");
      out.write("		        	success : function(resData) {\r\n");
      out.write("						if(resData){\r\n");
      out.write("							console.log('있다');\r\n");
      out.write("						} else{\r\n");
      out.write("		            		console.log('없다');	\r\n");
      out.write("		            	}\r\n");
      out.write("						// 콜백데이터가 있다면 \r\n");
      out.write("						if (resData != '') \r\n");
      out.write("		                	// 화면을 새로 고침한다. F5를 누른것과 동일하다.\r\n");
      out.write("		                	location.reload();\r\n");
      out.write("		        	}\r\n");
      out.write("				});		\r\n");
      out.write("			});\r\n");
      out.write("		});		\r\n");
      out.write("		</script>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<h2>팝업 메인 페이지</h2>\r\n");
      out.write("		");

		    for (int i = 1; i <= 10; i++) {
		        out.println("현재 팝업창은 " + popupMode + " 상태입니다.<br/>");
		    }
		    if (popupMode.equals("on")) {
		
      out.write("\r\n");
      out.write("		    <div id=\"popup\">\r\n");
      out.write("		        <h2 align=\"center\">공지사항 팝업입니다.</h2>\r\n");
      out.write("		        <div align=\"right\"><form name=\"popFrm\">\r\n");
      out.write("		            <input type=\"checkbox\" id=\"inactiveToday\" value=\"1\" />\r\n");
      out.write("		            하루 동안 열지 않음\r\n");
      out.write("		            <input type=\"button\" value=\"닫기\" id=\"closeBtn\" />\r\n");
      out.write("		        </form></div>\r\n");
      out.write("		    </div>\r\n");
      out.write("		");

		    }
		
      out.write("\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
